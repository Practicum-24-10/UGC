version: '3.9'

services:
    zookeeper:
      image: confluentinc/cp-zookeeper:7.4.0
      hostname: zookeeper
      container_name: zookeeper
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

    broker:
      image: confluentinc/cp-server:7.4.0
      hostname: broker
      container_name: broker
      depends_on:
        - zookeeper
      healthcheck:
        test: kafka-topics --list --bootstrap-server localhost:9092
        interval: 10s
        timeout: 5s
        retries: 3
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_JMX_PORT: 9101
        KAFKA_JMX_HOSTNAME: localhost
        KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
        CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
        CONFLUENT_METRICS_ENABLE: 'true'
        CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

    redis:
      image: redis:7.0.11-alpine
      volumes:
        - ugc_redis_volume:/data
      healthcheck:
        test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
        interval: 1s
        timeout: 3s
        retries: 5

    ugc:
      build: ../../.
      image: ugc-image
      env_file:
        - ../../.env
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8000/api/openapi"]
        interval: 15s
        timeout: 5s
        retries: 5
      depends_on:
        redis:
          condition: service_healthy
        broker:
          condition: service_healthy
      expose:
        - 8000
    tests:
      image: ugc-image
      working_dir: /app/ugc_service/tests/functional
      env_file:
        - .env
      entrypoint: >
        sh -c "pip install -r requirements.txt
        && pytest src_tests"
      depends_on:
        - ugc

volumes:
    ugc_redis_volume:
      name: ugc_test_redis_volume
