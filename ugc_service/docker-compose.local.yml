version: '3.9'

services:
    zookeeper:
      image: confluentinc/cp-zookeeper:7.4.0
      hostname: zookeeper
      container_name: zookeeper
      ports:
        - "2181:2181"
      environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

    broker:
      image: confluentinc/cp-server:7.4.0
      hostname: broker
      container_name: broker
      depends_on:
        - zookeeper
      ports:
        - "9092:9092"
        - "9101:9101"
      healthcheck:
        test: kafka-topics --list --bootstrap-server localhost:9092
        interval: 10s
        timeout: 5s
        retries: 3
      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_JMX_PORT: 9101
        KAFKA_JMX_HOSTNAME: localhost
        KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
        CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
        CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
        CONFLUENT_METRICS_ENABLE: 'true'
        CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

    zookeeper-clickhouse:
      image: zookeeper:3.5
      container_name: zookeeper-clickhouse
      hostname: zookeeper-clickhouse

    clickhouse-node1:
      container_name: clickhouse-node1
      build:
        context: .
        dockerfile: ./configs/click_house_config/Dockerfile.cl1
      hostname: clickhouse-node1
      ports:
        - "8123:8123"
        - "9000:9000"
      volumes:
        - ./configs/click_house_config/node1:/etc/clickhouse-server
      depends_on:
        - zookeeper-clickhouse
        - broker

    clickhouse-node2:
      image: yandex/clickhouse-server
      container_name: clickhouse-node2
      hostname: clickhouse-node2
      volumes:
        - ./configs/click_house_config/node2:/etc/clickhouse-server
      depends_on:
        - zookeeper-clickhouse
        - broker

    clickhouse-node3:
      build:
        context: .
        dockerfile: ./configs/click_house_config/Dockerfile.cl3
      container_name: clickhouse-node3
      hostname: clickhouse-node3
      volumes:
        - ./configs/click_house_config/node3:/etc/clickhouse-server
      depends_on:
        - zookeeper-clickhouse
        - broker

    clickhouse-node4:
      image: yandex/clickhouse-server
      container_name: clickhouse-node4
      hostname: clickhouse-node4
      volumes:
        - ./configs/click_house_config/node4:/etc/clickhouse-server
      depends_on:
        - zookeeper-clickhouse
        - broker

    redis:
      image: redis:7.0.11-alpine
      volumes:
        - ugc_redis_volume:/data
      healthcheck:
        test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
        interval: 1s
        timeout: 3s
        retries: 5
    ugc:
      build: .
      image: ugc-image
      volumes:
        - ./:/app/ugc_service
      env_file:
        - .env
      healthcheck:
        test:
          [
            "CMD",
            "curl",
            "--fail",
            "http://localhost:8000/api/openapi"
          ]
        interval: 15s
        timeout: 5s
        retries: 5
      depends_on:
        redis:
          condition: service_healthy
        broker:
          condition: service_healthy
      expose:
        - 8000
      command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

    nginx:
      image: nginx:1.23.4-alpine
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf:ro
        - ./configs:/etc/nginx/conf.d:ro
      depends_on:
        ugc:
          condition: service_healthy
      ports:
        - "80:80"

volumes:
  ugc_redis_volume:
    name: ugc_redis_volume
